var express = require('express');
var app = express();
var axios = require('axios')
//http://nodeapi-92027.onmodulus.net/api/{{Origin}}/{{maxBudget}}/{{cityClimate}}/2/Internet/{{Gay}}/{{Weed}}/
var querystring = require('querystring')

var async = require("async");

var server = app.listen(8080, function () {
   var host = server.address().address
   var port = server.address().port

   console.log("Example app listening at http://%s:%s", host, port)
})

//api end point to find city and coutry code
var CityCodeOrigin = null
var CoutryCodeOrigin = null
var CityCodeDestination = null
var CoutryCodeDestination = null
var pollingurl = null

app.get('/api/code/:Origin/:Destination',function(req,res){
    var Origin = req.params.Origin
    var Destination = req.params.Destination
    var config = {headers :{'accept' : 'application/json'}}


    var OriginCityCodeURL = "http://partners.api.skyscanner.net/apiservices/autosuggest/v1.0/UK/GBP/en?query="+Origin+"&apikey=prtl6749387986743898559646983194"
    var DestinationCodeURL = "http://partners.api.skyscanner.net/apiservices/autosuggest/v1.0/UK/GBP/en?query="+Destination+"&apikey=prtl6749387986743898559646983194"
    
    
    axios.get(OriginCityCodeURL,config)
    .then((response)=>{
        //console.log(response.data.Places[0].CityId)
        CityCodeOrigin = response.data.Places[0].CityId
        CoutryCodeOrigin = response.data.Places[0].CountryId
        console.log("done Origin")
        //res.send(CoutryCode)
    })
    .then(()=>{
        axios.get(DestinationCodeURL,config)
        .then((response)=>{
            CityCodeDestination = response.data.Places[0].CityId
            CoutryCodeDestination = response.data.Places[0].CountryId
            console.log("done Destination")
            console.log(CityCodeOrigin + CityCodeDestination + CoutryCodeDestination + CityCodeDestination)
            res.send("done !!")

            
        })
    })
    .catch((error)=>{
        console.log(error)
    })
});
/****************************api end point to find city and coutry code */


//api end point ro find price between two Cities

app.get('/api/checkPrice/:Origin/:Destination',function(req,res){
var config = {headers :{'accept' : 'application/json'}}
var endpoint = "http://partners.api.skyscanner.net/apiservices/pricing/v1.0"
var config = querystring.stringify({
  'apiKey': 'prtl6749387986743898559646983194',
  'country' : 'US',
  'currency': 'USD',
  'locale': 'en-US',
  'originPlace':'CAI-sky',
  'destinationplace':'LHR-sky',
  'outbounddate': '2016-11-15',
  'adults' : 1
});

axios.get("http://localhost:8080/api/code/"+req.params.Origin+"/"+req.params.Destination+"/")
.then(()=>{
            var config = querystring.stringify({
            'apiKey': 'prtl6749387986743898559646983194',
            'country' : CoutryCodeOrigin,
            'currency': 'USD',
            'locale': 'en-US',
            'originPlace': CityCodeOrigin,
            'destinationplace':CityCodeDestination,
            'outbounddate': '2016-11-15',
            'adults' : 1
            });

            axios.post(endpoint,config)
            .then((response)=>{
            console.log(response.headers.location)
            pollingurl = response.headers.location
            _querystring = pollingurl+"?apiKey=prtl6749387986743898559646983194"
            })
            .then(()=>{

            if(_querystring != null){
            axios.get(_querystring)
            .then((response)=>{
            var data = response.data.Itineraries[0].PricingOptions[1]
            console.log(data.Price)
            })
            }

            })
            .catch((error)=>{
            console.log(error)
            });
})








//res.send(CityCodeOrigin +":"+ CityCodeDestination +":"+ CoutryCodeDestination +":"+ CityCodeDestination)

});

/*********** api end point to find city and coutry code*/



app.get('/api/:Origin/:Budget/:Climate/:Month/:Internet/:Safe/:Nightlife/:Friendly/:Beach/:FemaleFriendly:/:Snow/:Region:/:FreeWifi/',function(req,res){
console.log(" Origin City:"  +req.params.Origin)
console.log(" Budget :"  +req.params.Budget)
console.log(" Climate :"  +req.params.Climate)
console.log(" Month :"  +req.params.Month)
console.log(" Internet :"  +req.params.Internet)
console.log(" Safe :"  +req.params.Safe)
console.log(" Nightlife :"  +req.params.Nightlife)
console.log(" Friendly :"  +req.params.Friendly)
console.log(" Beach :"  +req.params.Beach)
console.log(" FemaleFriendly :"  +req.params.FemaleFriendly)
console.log(" Snow :"  +req.params.Snow)
console.log(" Region :"  +req.params.Region)
console.log(" FreeWifi :"  +req.params.FreeWifi)








//http://localhost:8080/api/London/200/COLD/1/Internet/Air/Nightlife/Gay/Weed
//https://nomadlist.com/api/v2/filter/city?c=2 &f1_target=month&f1_type=em&f1_value=1&f2_target=temperatureC&f2_type=lt&f2_max=20&s=nomad_score&o=desc

var baseurl = "https://nomadlist.com/api/v2/filter/city?c="
var filtercount = 0
var Origin = req.params.Origin;
var Budget = Number(req.params.Budget)

/*** filters for nomadlist */
var Climate = req.params.Climate
var Month = req.params.Month

filtercount = 2

/*********find temperature filters */
switch(Climate){
    case 'COLD':
    temperateFilter = "f2_type=lt&f2_max=20"
    break;

    case 'HOT':
    temperateFilter = "f2_type=gt&f2_min=30"
    break;

    case 'MILD':
    temperateFilter = "f2_type=bt&f2_min=16&f2_max=25"
    break;

    case 'WARM':
    temperateFilter = "f2_type=gt&f2_min=21"
    break;
    
}




var url = baseurl+filtercount+"&f1_target=month&f1_type=em&f1_value="+Month+"&f2_target=temperatureC&"+temperateFilter+"&s=nomad_score&o=desc"

console.log(url)
/**********Optional Parameters */
var third = req.params.third
var fourth = req.params.fourth



if(!third.localeCompare("Gay+Friendly")){
    console.log("True")
    filtercount = 3
    var gayfilter = "&f3_target=lgbt_friendly&f3_type=gt&f3_min=3"
    //var weedfilter = "&f3_target=tags&f3_type=pm&f3_value=legal+weed"
    url = baseurl+filtercount+"&f1_target=month&f1_type=em&f1_value="+Month+"&f2_target=temperatureC&"+temperateFilter+gayfilter+"&s=nomad_score&o=desc"
    console.log(url)

    if(!fourth.localeCompare("Legal+Weed")){
    //console.log("True")
    filtercount = 4
    
    var weedfilter = "&f4_target=tags&f4_type=pm&f4_value=legal+weed"
    url = baseurl+filtercount+"&f1_target=month&f1_type=em&f1_value="+Month+"&f2_target=temperatureC&"+temperateFilter+gayfilter+weedfilter+"&s=nomad_score&o=desc"
    console.log(url)

}
}else{
    console.log("Skipped Gay , Check for Weed")
    if(!fourth.localeCompare("Legal+Weed")){
    //console.log("True")
    filtercount = 3
    
    var weedfilter = "&f3_target=tags&f3_type=pm&f3_value=legal+weed"
    url = baseurl+filtercount+"&f1_target=month&f1_type=em&f1_value="+Month+"&f2_target=temperatureC&"+temperateFilter+gayfilter+weedfilter+"&s=nomad_score&o=desc"
    console.log(url)

}else{
    console.log("Skipped Gay and Weed")
    url = baseurl+filtercount+"&f1_target=month&f1_type=em&f1_value="+Month+"&f2_target=temperatureC&"+temperateFilter+"&s=nomad_score&o=desc"
    console.log(url)
}

}
//console.log(req.params.third)
//console.log(req.params.fourth)

console.log(url)


/**********check internetfilter */








res.send([{
    "text" : url
}])






    /***************
    #Step 1 
    # Get Cities from Nomadlist
    #Step 2 
    # Create Sky Scanner session if session does not exist
    #Do Sky Scanner Query
    # Do Places API to get images 
    
    1 . Sky Scanner API will return session url in header
    2. Do a GET API for that session
     => Issues - city code from Nomadlist is not accepted by skyscanner
     => Possible solution -> do another api call to find ISO City Code
``````=> issue - only one session allowed per minute    
    */





    

     

    
    
    //res.send("Loaded !!")

})